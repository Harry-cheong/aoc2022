__________________ Note Structure __________________

|\ [Chapter] /|

| [Chapter Topic] |
* -> [Highlights]
~Syntax~ -> [Template of how to use it]
    1. -> [Sub-point]
    - -> [Info]
    e.g. -> [Example of use case]
<-> -> [Link to other chapter]


_________________ Difficulty Level __________________

[[ðŸŒŸ]]  - Easy
[[ðŸŒŸ]][[ðŸŒŸ]] - Intermediate
[[ðŸŒŸ]][[ðŸŒŸ]][[ðŸŒŸ]] - Hard

______________________ TO-READ ______________________

- https://www.geeksforgeeks.org/generics-in-c/
- https://www.geeksforgeeks.org/templates-cpp/


__________________ Getting Started ___________________

* https://www.freecodecamp.org/news/how-to-compile-your-c-code-in-visual-studio-code/

In summary
    1. MinGW Installation Manager
    2. Download g++ compiler in MinGW
    3. Edit Environment Var, include "C:\MinGW\bin\"
    4. Download coderunner extension

___________________ Introduction ___________________

| [ðŸŒŸ] C++ | 
* OOP -> clear structure to programs and allows code to be resued

* Used for high performance applications 
e.g. operating systems, graphical user interfaces and embedded systems 

* high level of control over system resources and memory 

| [ðŸŒŸ] C vs C++  |
* C and C++ support classes and objects, while C does not

______________________ Basics ______________________

| [ðŸŒŸ] Header Files |
* Header files add functionality to C++ programs
e.g.
#include <iostream> // Written on line 1; <iostream> is a header file library which contains the functions of program like cout, cin, etc. 
    1. iostream 
    2. string
    3. cmath

<-> Notable Header Files 

| [ðŸŒŸ] Code Structure |
    1. Header Files

    2. Namespace
    * Very commonly used 
    e.g. Using namespace std

    OR without the std namespace library
    e.g. std:: string greeting = "Hello" 

    3. function
    e.g. int main () {...}
    * ... code body 

    4. return 0 ends the main function

| [ðŸŒŸ] QoL |
* // -> single line comment
* /* ...  */ -> multi-line comment


_____________________ Variable _____________________

| [ðŸŒŸ] Identifiers |
* Naming Conventions 
- contain letters, digits and underscores
- cannot contain whitespaces or special characters like !, #, %, etc 
- must beign with a letter or an underscores
- case sensitive
- reserved words 


| [ðŸŒŸ] Constants |
* using const
e.g. const int myNum = 15;
e.g. const double = 3.99;


| [ðŸŒŸ] Types |
    1. int -> stores integers (whole numbers), without decimals 

    2. double -> stores floating point numbers, with decimals 

    3. float -> stores floating point numbers 

    * double vs float 
    - float : 4 bytes of memory for storage 
    double : 8 bytes of memory for storage. 

    - float : comparatively less precision; store decimal numbers with fewer digits. 
    double : twice the precision; store decimanl numbers with more digits

    4. char -> stores single characters such as 'a' or 'B'
    * in single quotations 

    5. string -> stores text
    * in double quotations

    6. bool -> stores values with two states: true or false

    7. auto -> declare a variable with a complicated type

    [Syntax] ~type variableName = value; ~
    * declare a variable without assigning the value, and assigning the value later


| [ðŸŒŸ] Multi Declaration |
    1. declaring same var, but diff values
    e.g. int x - 5, y = 6, z = 50;

    2. assign same value to multiple variable 
    e.g. 
    int x, y, z;
    x = y = z = 50;

| [ðŸŒŸ] Type Conversion |
    1. char -> int
    * char, in this case, is an int with char type
    * mainly used when iterating through string
    * using int() -> uses typecasting
    e.g. 
    char fav = '1';
    int convFav = int(fav - "0");

    2. char/string -> int
    * a int, with string type, will be converted to int; however the same does not apply to char
    * using stoi()
    e.g. 
    char fav = "1";
    int convFav = stoi(fav);

    3. any type -> string
    * using to_string()
    e.g.
    int fav = "93893289";
    string convFav = to_string(fav);

______________________ Output ______________________

* (pronounced "see-out") and uses the insertion operator (<<)
* multiple cout objects on different lines do not create multiple line outputs
e.g. cout << "Hello World"


| [ðŸŒŸ] Special Characters |
    1. \n -> incl in str to create blank line
    OR using endl 
    e.g. count << "Hello World" << endl;

    2. \t -> creates a horizontal tab

    3. \\ -> inserts a backlash chars

    4. \" -> inserts a double quote char 

    # Combining both text and variable
    e.g. cout << "I am" << myAge << " years old." 


_______________________ Input ________________________

* pronounced as "see-in" and uses the extraction operator (>>)
* to enable input in integrated terminal: File > Preference > Settings > Code Runner: Run in Terminal (tick box)

| [ðŸŒŸ] Input Line |
* using getline()

[~Syntax~]
~
istream& getline(istream& is, 
           string& str, char delim);
~
* is: whr the input is
* str: input stored in this object
* delim:  tells when to stop reading further input 

<-> fstream.txt (Advanced File Handling)


_____________________ Operators ______________________

| [ðŸŒŸ] Arithemetic Operators |
* Very similar to javascript, python

    1. + 
    2. -
    3. *
    4. /
    5. % -> returns the division remainder
    6. ++ -> Increment
    7. -- -> Decrement
    (Note: ** is a pointer to a pointer in c++; does not raise the number to the power specified)

| [ðŸŒŸ] Augmented Assignment Operators |
    1. +=
    2. -=
    3. *=
    4. /=
    5. %=

| [ðŸŒŸ][ðŸŒŸ][ðŸŒŸ] Bitwise Operators |
    1. &=
    2. |
    3. ^=
    4. >>=
    5. <<=

| [ðŸŒŸ] Comparison Operators |
    1. == 
    2. !=
    3. >
    4. <
    5. >=
    6. <=

| [ðŸŒŸ] Logical Operators |
    1. && -> Logical and
    2. || -> Logical or
    3. ! -> Logical not


______________________ Strings _______________________

* To use strings, include <string> library in the header file 

| [ðŸŒŸ] String Concatenation |
    1. using '+' operator
    e.g. string fullName = firstName + lastName;

    2. append
    e.g.
    string firstName = "John";
    string lastName = "Doe";
    string fullName = firstName.append(lastName);
    cout << fullName

| [ðŸŒŸ] Indexing |
* access the characters in str w index no inside []

| [ðŸŒŸ] Methods |
    **1. substr()
    [syntax] 
    ~
    string.substr(pos, len);
    1. pos: position of the first char to be copied
    2. len: length of the sub-string 
    ~

    2. length() OR size() -> returns the length of a string 

| [ðŸŒŸ] Functions |
    1. getline() -> used w. cin to print > 1 word 
    e.g. 
    getline(cin, fullName);  -> accepts more than one word as input 


________________ If-else Statements ________________

* Exactly the same as javascript

[Syntax] 
~
    if (condition) {
        // code
    } else if {
        //code
    }
    else {
        // code
    }
~ 

| [ðŸŒŸ][ðŸŒŸ] Ternaray Operator |

[Syntax] ~variable = (condition) ? expressionTrue : expressionFalse; ~

# Switch 
[Syntax]
~
    switch(expression) {
        case x:
            // code block 
            break; -> new to c++

        case y: 
            // code block
            break;

        default:
            // code block 

    })
~

| [ðŸŒŸ] Keywords |
    1. break 
    * stop exec of more code and case testing inside the block 

    2. default
    * specifies some code to run if there is no case match

    3. continue 
    * the continue statement breaks one iteration of the loop

_______________________ Loops _______________________

| [ðŸŒŸ] white-loops |
    [Syntax] 
    ~
        while (condition) {
            // code block to be executed
        }
    ~

| [ðŸŒŸ] do-if loop |
    * Loop will always be executed at least once, even if the condition is false, because the code block is executed before condition is tested
    [Syntax] 
    ~
    do {
        // code block to be executed
    }
    while (condition);
    ~

_____________________ For-loop _____________________

[Syntax]
~
for (statement 1; statement 2; statement 3) {
    // code block to be executed
}
* Statement 1 is executed (one time) before the execution of the code block
* Statement 2 defines the condition for executing the code block
* Statement 3 is executed (every time) after the code block has been executed 
~

e.g. 
for (int i =0; i < 5; i++) {
    cout << i << "\n"
}

| [ðŸŒŸ] Nested Loops |
* The "inner loop" will be executed one time for each iteration of the "outer loop" 

| [ðŸŒŸ] for iterable in iterator loop |
[Syntax] for (type variableName : arrayName) {
    // code block to be executed 
}

e.g. 
for (type variableName : arrayName) {
    // code block to be executed 
}


______________________ Arrays ______________________

| [ðŸŒŸ] Declaration |
* To declare an array, define the variable type, specify the name of the array followed by sqr brackets and specify the number of elements it should store.
* Good practice to provide size; omission of it will result in a size to be automatically determined by compiler 

e.g. string cars[3] = {'Volvo', 'BMW' , 'Ford'};

| [ðŸŒŸ] Code Snippets |
* assigning value to next available slot 
e.g. 
string list[100];
int i = 0;
while (i<100) {
    list[i] = 'A';
    i++;
}


| [ðŸŒŸ] Functions |
    1. sizeof() -> to get the size of an array 

| [ðŸŒŸ] mdarray |
* an array of Arrays
e.g. 
string letters[2][4] = {
    {'A', 'B', 'C', 'D'},
    {'E', 'F', 'G', 'H'}
};
cout << letters[0][2]; // Outputs "C"


_____________________ Structure _____________________

* group several related vars into one place
* contain many different data types (int, string, bool, etc.)

| [ðŸŒŸ] Creating a Structure |
* Two types 
[Case #1] struct car {...} -> named structure
* By giving a name to the structure, you can treat it as a data type 
e.g. 
car Honda; 
car Mercedes; 

[Case #2] struct {...} car
* A variable, car, with the defined struct is created

[Syntax] 
~
struct {
    int myNum; // Member (int variable)
    string myString; // Member (string variable)
} myStructure
~

| [ðŸŒŸ] Accessing structure members |
* To assess members of a structure, use the dot syntax (.)

e.g. 
myStructure.myNum = 1


______________ References and Pointers ______________

* are important because they give you the ability to manipulate the data in the computer's memory - which can reduce the code and improve the performance. 


____________________ References ____________________

* is a "reference" to an existing var, and it is created with the & operator 
e.g. 
string food = "Pizza";
string &meal = food; // Ref. var meal created


| [ðŸŒŸ][ðŸŒŸ] Memory Address |
* when we assign a value to the variable, it is stored in this memory address. 

    1. Finding address
        a. using &
        e.g. 
        string meal;
        cout << &meal; 

        b. using *
        e.g. 
        string meal;
        cout << *meal;
    
| [ðŸŒŸ][ðŸŒŸ][ðŸŒŸ] Creating a list/vector of references |
* using reference_wrapper<type> 

e.g. 
    int num = 9;
    vector<referecne_wrapper<int>> referenceList;
    referenceList.push_back(&num);


_____________________ Pointers _____________________

* stores the memory address as its value 

| [ðŸŒŸ] Creating pointers |
* type of the pointer has to match the type of variable you're working with 

e.g. 
string food = "Pizza"; // A food variable of type string
string* ptr = &food; // A pointer varialbe, with the name ptr, that stores the address of food
* ptr holds the value of food's memory address

| [ðŸŒŸ][ðŸŒŸ] Ref and Dref Operators |
* Reference operator '&'
* Dereference operator '*'

e.g.
...
// Reference: Output the memory address of food with the pointer
cout << ptr;

// Dereference: Output the value of food with the pointer 
cout << *ptr;

e.g. 
// Changing value of pointers
*ptr = "Hamburger"


_____________________ Functions _____________________
* a funct consist of two parts: Declaraton and Definition
[Syntax]
~
void myFunction(parameter1, parameter2, parameter3) { -> Declaration
    // code to be executed -> Definition
}
~

| [ðŸŒŸ] Function Type |
    1. void 
    * the void keyword indicates that the function should not return a value 

    2. int, string, etc data types.
    * the fn will return a value

| [ðŸŒŸ] Function Keywords |
    1. return 
    * returns the result 

| [ðŸŒŸ] Parameters and Arguments |
* when a parameter is passed to the fn, it is called an argument. 

e.g. 
void myFunction(string fname) {
    cout << fname 
}
int main() {
    myFunction("Liam")
}
* fname is a parameter, while Liam, Jenny and Anja are arguments 

| [ðŸŒŸ] Default Argument |
e.g. 
void myFunction(string country = "Norway") {
    cout < country << endl;
}

| [ðŸŒŸ][ðŸŒŸ] Passing references as arguments |
* by passing a reference to the fn, this can be useful when you need to change the value of the arguments 
* (*) and (&) operator used

e.g. 
void swapNums(int &x, int &y) {
    ...
}

| [ðŸŒŸ] Overloading Functions |
* Multiple functions can have the same name as long as the number and/or type of parameters are different. 

| [ðŸŒŸ] Recursion |
* fn calling itself 

e.g. 
int sum(int k) {
    if (k > 0) {
        return k + sum(k - 1);
    } else {
        return 0;
    }
} 
int main() {
    int result = sum(10);
    cout << result; 
    return 0;
}

| [ðŸŒŸ][ðŸŒŸ][ðŸŒŸ] Variadic Function |
* are templates that take a variable length argument
* a variable num of args are represented by three dots (...)
<-> cstdargh.txt

e.g.
int sum(int count, ...) {
    int res = 0;
    va_list ap;
    va_start(ap, num);
    for (int i = 0; i < num; i++) {
        res += va_arg(ap, int);
    }

    // Return the resultant sum
    return res;
}   


____________ Object Oriented Programming ____________

* OOP is faster and easier to executed
* OOP provides a clear structure for the programs
* OOP helps to keep code dry and makes the code easier to maintain, modify and debug
* OOP makes it possible to create full reusuable appliations with less code and shorter development time

| [ðŸŒŸ] Creating a class |
* using the class keyword
e.g. 
class MyClass {             // The class
    public:                 // Access specifier
        int myNum;          // Attribute (int variable)
        string myString;    // Attribute (string variable)
}
* the public keyword is an access specifier, which specifies that members of the class are accessible from outside the class
* inside the class, there are 2 attributes

| [ðŸŒŸ] Defining class methods |

    #1 Inside class definition
    e.g. 
    class MyClass {
        public:
            void myMethod() {
        class 
            cout << "Hello World!"';   
            }
    };

    #2 Outside class definition
    e.g. 
    class MyClass {
        public:
            void myMethod();
    };

    // Method/function definition outside the class
    void MyClass::myMethod() {
        cout << "Hello World!";
    }

| [ðŸŒŸ][ðŸŒŸ] Accessing Instance Attributes |
* using this to refer current class instance variable

e.g. 
class Employee {
    public: 
        int id;
        string name;

        void update(int id, string name) {
            this -> id = id;
            this -> name = name;
        }
}



| [ðŸŒŸ][ðŸŒŸ] Constructors |
* is a special method that is automatically called when an object of a class is created
* to create a constructor, use the same name as the class, followed by parentheses()
* like class methods, constructors can be defined inside or outside the class

e.g. 
class MyClass {
    public:
        MyClass(parameter1, parameter2 ...) { // setting initial values for attributes
            ...
        }
}

int main() {
    MyClass Juvenescent(parameter1, paramet2);
}

| [ðŸŒŸ] Access Specifiers |
* public - members are accessible from outside the class
* private - members cannot be accessed from outside the class
* protected - members cannot be accessed from outside the class, however, they can be accessed in inherited classes. 
* Note: by default, all members of a class are private if you don't specify an access specifier

| [ðŸŒŸ] Encapsulation |
* make sure that "sensitive" data is hidden from users
* if you want others to read or modify the value of a private member, you can provide public get and set methods

* Why: #1: ensures better control of your data, because you can change one part of the code without affecting other parts
* Why: #2: Increased security of data
e.g. 
    class Employee {
        private:
        // Private attribute
            int salary;

        public:
        // Setter
            coid setSalary(int s) {
                salary = s;
            }
    }

| [ðŸŒŸ][ðŸŒŸ] Inheritance |
* derived class (child) - the class that inherits from another class
* base class (parent) - the class being inherited 
* use the : symbol

e.g. 
// Base class
class Vehicle {
    ...
}

// Derived class
class Car: public Vehicle {
    ...
}

| [ðŸŒŸ][ðŸŒŸ] Multi-level Inheritance |
* a class can also be derived from one class

| [ðŸŒŸ][ðŸŒŸ] Multiple Inheritance |
* a class can also be derived from more than one base class, using a comma-separated list

| [ðŸŒŸ][ðŸŒŸ] Polymorphism |
* means "many forms" and it occurs when we have many classes that are related to each other by Inheritance
* uses those methods to perform different tasks
* useful for code reusuability: reuse attributes and methods of an existing class when you create a new class
e.g. 
// Base class
class Animal {
    public:
        void animalSound() {
            cout << "The animal makes a sound";
        }
};

// Derived class
class Pig: public Animal {
    public: 
        void animalSound() { -> overrides the animalSound() function in the base class
            cout << "The pig says: wee wee";
        }
}

________________ Exception Handling ________________

| [ðŸŒŸ] Keywords |
    1. try
    - allows you to define a block of code to be tested for errors while it is being executed

    2. throw
    - throws an exception when a problem is detected which lets us create a custom errors

    3. catch
    - allows you to define a block of code to be executed, if an error occurs in the try block 

[~Syntax~]
~
try {
    // Block of code to try
    throw exception; // Throw an exception when a problem arise
}
catch() {
    // Block of code to handle errors
}
~

| [ðŸŒŸ] Exception - Any type |
* using (...)
e.g.
try {
    int age = 15;
    if (age >= 18) {
        cout << "Access granted - you are old enough.";
    } else {
        throw 505;
    }
}
catch (...) {
    cout << "Access denied - You must be at least 18 years old.\n";
}